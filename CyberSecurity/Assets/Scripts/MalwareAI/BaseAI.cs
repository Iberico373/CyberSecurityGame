using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BaseAI : Unit
{
    public UnitManager manager;
    public GameObject target;
    public GameObject deathExplosion;
    public Vector3 targetPos;
    public List<GameObject> aggrolist;
    public List<GameObject> infectedDS = new List<GameObject>();

    private void Start()
    {
        isDetected = false;
    }

    public virtual void Action()
    {

    }

    public void SelectTarget()
    {
        UpdateAggroList();
        target = aggrolist[0];

        if (target == null)
        {
            manager.EndTurn();
        }

        else
        {
            if (InRange() || IsObstructed())
            {
                Action();
                manager.EndTurn();
            }

            else
            {
                targetPos = GetNearestTile(manager.grid.NodeFromWorldPoint(target.transform.position));
                Move(targetPos);
            }
        }        
    }

    public void GetAggroList()
    {
        foreach (Unit unit in manager.unitList)
        {
            if (!unit.CompareTag("Malware"))
            {
                aggrolist.Add(unit.gameObject);
            }
        }
    }

    public void SortAggroListByDistance()
    {
        GameObject temp;
        Node startNode = manager.grid.NodeFromWorldPoint(transform.position);

        for (int j = 0; j <= aggrolist.Count - 2; j++)
        {
            for (int i = 0; i <= aggrolist.Count - 2; i++)
            {
                if (manager.pathfinding.GetDistance(startNode, manager.grid.NodeFromWorldPoint(aggrolist[i].transform.position)) >
                    manager.pathfinding.GetDistance(startNode, manager.grid.NodeFromWorldPoint(aggrolist[i + 1].transform.position)))
                {
                    temp = aggrolist[i + 1];
                    aggrolist[i + 1] = aggrolist[i];
                    aggrolist[i] = temp;
                }
            }
        }
    }

    public void SetHighestAggroPriorityByTag(string tag)
    {
        for (int i = 0; i < aggrolist.Count; i++)
        {
            if (aggrolist[i].CompareTag(tag))
            {
                GameObject temp = aggrolist[i];

                if (aggrolist[0].CompareTag(tag))
                {
                    Node tempNode = manager.grid.NodeFromWorldPoint(temp.transform.position);
                    Node zeroNode = manager.grid.NodeFromWorldPoint(aggrolist[0].transform.position);

                    if (CompareNodeDist(tempNode, zeroNode) == tempNode)
                    {
                        aggrolist.Remove(aggrolist[i]);
                        aggrolist.Insert(0, temp);
                    }

                    else
                    {
                        aggrolist.Remove(aggrolist[i]);
                        aggrolist.Insert(1, temp);
                    }
                }

                else
                {
                    aggrolist.Remove(aggrolist[i]);
                    aggrolist.Insert(0, temp);
                }                
            }
        }
    }

    public void SetHighestAggroPriorityById(int id)
    {
        for (int i = 0; i < aggrolist.Count; i++)
        {
            if (aggrolist[i].GetComponent<Unit>().id == id)
            {
                GameObject temp = aggrolist[i];

                if (aggrolist[0].GetComponent<Unit>().id == id)
                {
                    Node tempNode = manager.grid.NodeFromWorldPoint(temp.transform.position);
                    Node zeroNode = manager.grid.NodeFromWorldPoint(aggrolist[0].transform.position);

                    if (CompareNodeDist(tempNode, zeroNode) == tempNode)
                    {
                        aggrolist.Remove(aggrolist[i]);
                        aggrolist.Insert(0, temp);
                    }

                    else
                    {
                        aggrolist.Remove(aggrolist[i]);
                        aggrolist.Insert(1, temp);
                    }
                }

                else
                {
                    aggrolist.Remove(aggrolist[i]);
                    aggrolist.Insert(0, temp);
                }
            }
        }
    }

    public void SetLowestAggroPriorityByTag(string tag)
    {
        GameObject temp;

        for (int i = 0; i < aggrolist.Count; i++)
        {
            if (aggrolist[0].CompareTag(tag))
            {
                temp = aggrolist[0];
                aggrolist.Remove(aggrolist[0]);
                aggrolist.Add(temp);
            }
        }
    }

    public void SetLowestAggroPriorityById(int id)
    {
        GameObject temp;

        for (int i = 0; i < aggrolist.Count; i++)
        {
            if (aggrolist[0].GetComponent<Unit>().id == id)
            {
                temp = aggrolist[0];
                aggrolist.Remove(aggrolist[0]);
                aggrolist.Add(temp);
            }
        }
    }

    public void UpdateAggroList()
    {
        GameObject temp;

        for (int i = 0; i < aggrolist.Count; i++)
        {
            if (aggrolist[i].CompareTag("Security Control"))
            {
                if (aggrolist[i].GetComponent<Unit>().health <= 0)
                {
                    temp = aggrolist[i];

                    aggrolist.Remove(aggrolist[i]);
                    aggrolist.Add(temp);
                }
            }

            else if (aggrolist[i].GetComponent<Unit>().id == 1)
            {
                if (aggrolist[i].GetComponent<DataStructure>().capturedSC)
                {
                    if (aggrolist[0].CompareTag("Security Control"))
                    {
                        Node nodeA = manager.grid.NodeFromWorldPoint(aggrolist[i].transform.position);
                        Node nodeB = manager.grid.NodeFromWorldPoint(aggrolist[0].transform.position);
                        temp = aggrolist[i];

                        if (CompareNodeDist(nodeA, nodeB) == nodeA)
                        {                           
                            aggrolist.Remove(aggrolist[i]);
                            aggrolist.Insert(0, temp);
                        }

                        else
                        {
                            aggrolist.Remove(aggrolist[i]);
                            aggrolist.Insert(1, temp);
                        }
                    }
                    
                    else if (aggrolist[0].GetComponent<Unit>().id == 1)
                    {
                        Node nodeA = manager.grid.NodeFromWorldPoint(aggrolist[i].transform.position);
                        Node nodeB = manager.grid.NodeFromWorldPoint(aggrolist[0].transform.position);
                        temp = aggrolist[i];

                        if (CompareNodeDist(nodeA, nodeB) == nodeA)
                        {
                            aggrolist.Remove(aggrolist[i]);
                            aggrolist.Insert(0, temp);
                        }

                        else
                        {
                            aggrolist.Remove(aggrolist[i]);
                            aggrolist.Insert(1, temp);
                        }
                    }
                }

                else if (aggrolist[i].GetComponent<DataStructure>().capturedM)
                {
                    if (!aggrolist[i].GetComponent<DataStructure>().isLocked 
                        && manager.selectedCharacter.GetComponent<Unit>().name.Equals("Ransomware"))
                    {
                        return;
                    }

                    temp = aggrolist[i];

                    aggrolist.Remove(aggrolist[i]);
                    aggrolist.Add(temp);
                }
            }
        }
    }

    public Vector3 GetNearestTile(Node targetNode)
    {
        manager.grid.UpdateGrid();
        Vector3 nearestTile = new Vector3();

        while (true)
        {
            List<Node> adjacentTiles = manager.grid.GetNeighbours(targetNode, 1);
            List<Node> previousNodes = new List<Node>();
            Node openNode = null;
            Node nearestNode = adjacentTiles[0];

            foreach (Node n in adjacentTiles)
            {
                //if (previousNodes.Contains(n))
                //{
                //    continue;
                //}

                if (n.walkable)
                {
                    if (openNode == null)
                    {
                        openNode = n;
                    }

                    else
                    {
                        openNode = CompareNodeDist(openNode, n);
                    }
                }

                //previousNodes.Add(n);
                nearestNode = CompareNodeDist(nearestNode, n);
            }

            if (nearestNode.ReturnObject() != null)
            {
                if (openNode != null)
                {
                    nearestTile = openNode.worldPos;
                    break;
                }

                else if (nearestNode.ReturnObject().CompareTag("Security Control"))
                {
                    SetHighestAggroPriorityById(nearestNode.ReturnObject().GetComponent<Unit>().id);
                    targetNode = nearestNode;
                }

                else if (nearestNode.ReturnObject().CompareTag("Malware"))
                {
                    targetNode = nearestNode;
                }
            }

            else
            {
                nearestTile = nearestNode.worldPos;
                break;
            }
        }

        return nearestTile;
    }

    public Node CompareNodeDist(Node nodeA, Node nodeB)
    {
        Node startNode = manager.grid.NodeFromWorldPoint(transform.position);

        if (manager.pathfinding.GetDistance(startNode, nodeA) > manager.pathfinding.GetDistance(startNode, nodeB))
        {
            return nodeB;
        }

        else
        {
            return nodeA;
        }
    }

    public bool IsObstructed()
    {
        List<Node> tiles = manager.grid.GetNeighbours(manager.grid.NodeFromWorldPoint(manager.selectedCharacter.transform.position), 1);
        GameObject obstruction = null;

        foreach (Node n in tiles)
        {
            if (n.walkable)
            {
                return false;
            }

            else
            {
                GameObject character = n.ReturnObject();

                if (character.CompareTag("Security Control"))
                {
                    if (obstruction == null && character.GetComponent<Unit>().health > 0)
                    {
                        obstruction = character;
                    }

                    else
                    {
                        if (obstruction.GetComponent<Unit>().health > character.GetComponent<Unit>().health 
                            && character.GetComponent<Unit>().health > 0)
                        {
                            obstruction = character;
                        }
                    }
                }

                else
                {
                    continue;
                }
            }
        }

        target = obstruction;
        return true;
    }

    public bool InRange()
    {
        List<Node> tiles = manager.grid.GetNeighbours(manager.grid.NodeFromWorldPoint(manager.selectedCharacter.transform.position), 1);

        foreach (Node n in tiles)
        {
            if (n.ReturnObject() != null)
            {
                if (n.ReturnObject() == target)
                {
                    return true;
                }
            }
        }

        return false;
    }
}
